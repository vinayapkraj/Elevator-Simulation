{"version":3,"file":"ng4-menu-item.js","sourceRoot":"","sources":["../../../../../src/modules/components/menu-item/ng4-menu-item.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAKuB;AAEvB,gFAA6E;AAO7E,IAAa,WAAW;IAepB,qBAAoB,KAA2B,EAC3B,OAAmB,EACnB,QAAkB;QAFlB,UAAK,GAAL,KAAK,CAAsB;QAC3B,YAAO,GAAP,OAAO,CAAY;QACnB,aAAQ,GAAR,QAAQ,CAAU;QAXtB,iBAAY,GAAG,KAAK,CAAC;IAWI,CAAC;IAO1C,sBAAW,mCAAU;aAArB;YACI,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC;QAC1D,CAAC;;;OAAA;IAMM,4BAAM,GAAb,UAAc,MAAO;QACjB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAE5C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,eAAe,EAAE,CAAC;YACzB,MAAM,CAAC,cAAc,EAAE,CAAC;QAC5B,CAAC;IACL,CAAC;IAMM,2BAAK,GAAZ;QACI,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC;IAKM,2BAAK,GAAZ;QACI,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;IACvF,CAAC;IACL,kBAAC;AAAD,CAAC,AAvDD,IAuDC;AAjDY;IAAR,YAAK,EAAE;;iDAA6B;AAO5B;IAAR,YAAK,EAAE;;0CAAmB;AAblB,WAAW;IALvB,gBAAS,CAAC;QACP,QAAQ,EAAE,eAAe;QACzB,SAAS,EAAE,CAAE,cAAc,CAAE;QAC7B,WAAW,EAAE,iBAAiB;KACjC,CAAC;qCAgB6B,6CAAoB;QAClB,iBAAU;QACT,eAAQ;GAjB7B,WAAW,CAuDvB;AAvDY,kCAAW","sourcesContent":["import {\n    Component,\n    Input,\n    Renderer,\n    ElementRef\n} from '@angular/core';\n\nimport { DropdownStateService } from '../../services/dropdown-state.service';\n\n@Component({\n    selector: 'ng4-menu-item',\n    styleUrls: [ './style.scss' ],\n    templateUrl: './template.html'\n})\nexport class Ng4MenuItem {\n    /**\n     * @preventClose\n     * @desc if true, clicking on the item won't close the dropdown\n     * @type {boolean}\n     */\n    @Input() public preventClose = false;\n\n    /**\n     * @name value\n     * @desc any value associated to the item\n     * @type {any}\n     */\n    @Input() public value: any;\n\n    constructor(private state: DropdownStateService,\n                private element: ElementRef,\n                private renderer: Renderer) {}\n\n    /**\n     * @name isSelected\n     * @desc returns current selected item\n     * @returns {boolean}\n     */\n    public get isSelected(): boolean {\n        return this === this.state.dropdownState.selectedItem;\n    }\n\n    /**\n     * @name click\n     * @desc emits select event\n     */\n    public select($event?): void {\n        this.state.dropdownState.select(this, true);\n\n        if ($event) {\n            $event.stopPropagation();\n            $event.preventDefault();\n        }\n    }\n\n    /**\n     * @name click\n     * @desc emits click event\n     */\n    public click(): void {\n        this.state.dropdownState.onItemClicked.emit(this);\n    }\n\n    /**\n     * @name focus\n     */\n    public focus() {\n        this.renderer.invokeElementMethod(this.element.nativeElement.children[0], 'focus');\n    }\n}\n"]}