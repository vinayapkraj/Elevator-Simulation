"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var animations_1 = require("@angular/animations");
var actions_1 = require("./actions");
var ng4_menu_item_1 = require("../menu-item/ng4-menu-item");
var dropdown_state_service_1 = require("../../services/dropdown-state.service");
var Ng4DropdownMenu = (function () {
    function Ng4DropdownMenu(state, element, renderer) {
        this.state = state;
        this.element = element;
        this.renderer = renderer;
        this.width = 4;
        this.focusFirstElement = true;
        this.appendToBody = true;
        this.listeners = {
            arrowHandler: undefined,
            handleKeypress: undefined
        };
    }
    Ng4DropdownMenu.prototype.show = function () {
        this.state.menuState.isVisible = true;
        this.listeners.handleKeypress = this.renderer.listen(document.body, 'keydown', this.handleKeypress.bind(this));
        this.listeners.arrowHandler = this.renderer.listen(window, 'keydown', actions_1.arrowKeysHandler);
    };
    Ng4DropdownMenu.prototype.hide = function () {
        this.state.menuState.isVisible = false;
        this.state.dropdownState.unselect();
        this.listeners.arrowHandler();
        this.listeners.handleKeypress();
    };
    Ng4DropdownMenu.prototype.updatePosition = function (position) {
        this.position = position;
        this.ngDoCheck();
    };
    Ng4DropdownMenu.prototype.handleKeypress = function ($event) {
        var key = $event.keyCode;
        var items = this.items.toArray();
        var index = items.indexOf(this.state.dropdownState.selectedItem);
        if (!actions_1.ACTIONS.hasOwnProperty(key)) {
            return;
        }
        actions_1.ACTIONS[key].call(this, index, items, this.state.dropdownState);
    };
    Ng4DropdownMenu.prototype.getMenuElement = function () {
        return this.element.nativeElement.children[0];
    };
    Ng4DropdownMenu.prototype.calcPositionOffset = function (position) {
        if (!position) {
            return;
        }
        var element = this.getMenuElement();
        var supportPageOffset = window.pageXOffset !== undefined;
        var isCSS1Compat = ((document.compatMode || '') === 'CSS1Compat');
        var x = supportPageOffset ? window.pageXOffset : isCSS1Compat ?
            document.documentElement.scrollLeft : document.body.scrollLeft;
        var y = supportPageOffset ? window.pageYOffset : isCSS1Compat ?
            document.documentElement.scrollTop : document.body.scrollTop;
        var _a = this.applyOffset(position.top + (this.appendToBody ? y - 15 : 0) + "px", position.left + x - 5 + "px"), top = _a.top, left = _a.left;
        var clientWidth = element.clientWidth;
        var clientHeight = element.clientHeight;
        var marginFromBottom = parseInt(top) + clientHeight + (this.appendToBody ? 0 : y - 15);
        var marginFromRight = parseInt(left) + clientWidth;
        var windowScrollHeight = window.innerHeight + window.scrollY;
        var windowScrollWidth = window.innerWidth + window.scrollX;
        if (marginFromBottom >= windowScrollHeight) {
            top = parseInt(top.replace('px', '')) - clientHeight + "px";
        }
        if (marginFromRight >= windowScrollWidth) {
            var marginRight = marginFromRight - windowScrollWidth + 30;
            left = parseInt(left.replace('px', '')) - marginRight + "px";
        }
        return { top: top, left: left };
    };
    Ng4DropdownMenu.prototype.applyOffset = function (top, left) {
        if (!this.offset) {
            return { top: top, left: left };
        }
        var offset = this.offset.split(' ');
        if (!offset[1]) {
            offset[1] = '0';
        }
        top = parseInt(top.replace('px', '')) + parseInt(offset[0]) + "px";
        left = parseInt(left.replace('px', '')) + parseInt(offset[1]) + "px";
        return { top: top, left: left };
    };
    Ng4DropdownMenu.prototype.ngOnInit = function () {
        if (this.appendToBody) {
            document.body.appendChild(this.element.nativeElement);
        }
    };
    Ng4DropdownMenu.prototype.ngDoCheck = function () {
        if (this.state.menuState.isVisible && this.position) {
            var element = this.getMenuElement();
            var position = this.calcPositionOffset(this.position);
            if (position) {
                this.renderer.setElementStyle(element, 'top', position.top);
                this.renderer.setElementStyle(element, 'left', position.left);
            }
            if (this.focusFirstElement &&
                this.items.first &&
                !this.state.dropdownState.selectedItem) {
                this.state.dropdownState.select(this.items.first, false);
            }
        }
    };
    Ng4DropdownMenu.prototype.ngOnDestroy = function () {
        var elem = this.element.nativeElement;
        elem.parentNode.removeChild(elem);
        if (this.listeners.handleKeypress) {
            this.listeners.handleKeypress();
        }
    };
    return Ng4DropdownMenu;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Ng4DropdownMenu.prototype, "width", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Ng4DropdownMenu.prototype, "focusFirstElement", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Ng4DropdownMenu.prototype, "offset", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Ng4DropdownMenu.prototype, "appendToBody", void 0);
__decorate([
    core_1.ContentChildren(ng4_menu_item_1.Ng4MenuItem),
    __metadata("design:type", core_1.QueryList)
], Ng4DropdownMenu.prototype, "items", void 0);
Ng4DropdownMenu = __decorate([
    core_1.Component({
        selector: 'ng4-dropdown-menu',
        styleUrls: ['./style.scss'],
        templateUrl: './template.html',
        animations: [
            animations_1.trigger('fade', [
                animations_1.state('visible', animations_1.style({ display: 'block', overflow: '*' })),
                animations_1.state('hidden', animations_1.style({ display: 'none', overflow: 'hidden', width: '0' })),
                animations_1.transition('hidden => visible', [
                    animations_1.animate(150, animations_1.keyframes([
                        animations_1.style({ opacity: 0, offset: 0, height: '0', width: '0' }),
                        animations_1.style({ opacity: 1, offset: 1, height: '*', width: '*' }),
                    ]))
                ]),
                animations_1.transition('visible => hidden', [
                    animations_1.animate(250, animations_1.keyframes([
                        animations_1.style({ opacity: 1, offset: 0, height: '*', width: '*' }),
                        animations_1.style({ opacity: 0, offset: 1, height: '0', width: '0' }),
                    ]))
                ])
            ]),
            animations_1.trigger('opacity', [
                animations_1.transition('hidden => visible', [
                    animations_1.animate(450, animations_1.keyframes([
                        animations_1.style({ opacity: 0, offset: 0 }),
                        animations_1.style({ opacity: 1, offset: 1 }),
                    ]))
                ]),
                animations_1.transition('visible => hidden', [
                    animations_1.animate(200, animations_1.keyframes([
                        animations_1.style({ opacity: 1, offset: 0 }),
                        animations_1.style({ opacity: 0.5, offset: 0.3 }),
                        animations_1.style({ opacity: 0, offset: 1 }),
                    ]))
                ])
            ])
        ]
    }),
    __metadata("design:paramtypes", [dropdown_state_service_1.DropdownStateService,
        core_1.ElementRef,
        core_1.Renderer])
], Ng4DropdownMenu);
exports.Ng4DropdownMenu = Ng4DropdownMenu;
//# sourceMappingURL=ng4-dropdown-menu.js.map